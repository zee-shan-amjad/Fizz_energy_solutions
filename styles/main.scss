/*

BUILDING FEATURES SECTION:

  We will be building the feature section of our website. While building it we will learn following cool techniques:

  - How to include and use an icon font in a project
  - Another way of creating the 'skewed section' design
  - When and how to use the direct child selector

  Now if we look at the completed features section we have 4 columns where each column contains a box. Each box explains a feature of our product and contains an 'icon', 'heading' and a 'paragraph'. When we 
  hover over any of these box it has some nice animations affect. At the top of each card we have an icon and on icon we also have a gradient going on like we have in secondary heading. Finally the overall 
  features section has diagonal lines and is actually non-rectangular.

  USING ICON FONTS:

  Icon fonts are vector based images just like svgs but these are easy to use in our website as compared to svgs. We can use 'images' e.g 'png' images as a fonts but that is not a good practice because images 
  do not scale up nicely when we scale our webpage. On the other hand icon-fonts are vectors and no matter how much we zoom in the icons will always remain nice and sharp. We can also use 'SVG' format but that 
  is more advanced and we will use it in our next project.

  Now we can get fonts from many places and for this project we will use the fonts from 'linea.io' website. So we will go to the 'linea.io' website and simply download all icon sets. This set contains icons
  from many categories and also in different formats but what we want is in the 'basic' directory and then the 'iconfont' directory.

  Now from 'iconfont' folder we will copy the 'fonts' folder and 'styles.css' file and paste it in the 'css' folder of our project and then rename the icon stylesheet into lets say 'icon-font.css'. Then in
  our html we will include this as an stylesheet. And now that we have included it we can use there icons and for each icon they have a specific classname which we will use. We will use these later when we
  will need it and for now we will start building our 'feature' section grid.

  FEATURES SECTION:

  We simply have a single row and init we have 4 columns however unlike previously where we included the content directly into the grid columns, this time we will include another box in each of the column. The
  reason for this is that first we want to include some more space between the columns than the default 'gutter-horizontal' but more importantly because we want this hover effect on our feature cards. So instead 
  of manipulating our grid columns directly it is better to create these seperate boxes inside the columns and then work on these boxes. Again we will use emmet to include these as follows:

                                            .row>.col-1-of-4>.feature-box

  This will get translated to the following:

                                            <div class="row">
                                              <div class="col-1-of-4">
                                                <div class="feature-box">
                                                
                                                </div>
                                              </div>
                                            </div>

  Now what do we have in each of the 'feature-box'. First we want to have font-icons and for this we will use 'i' html element to include them. Typically 'i' elements are used when we want to format a certain
  part of our paragraph differently. Typically 'i' tag make text italic. However here we won't put text in the 'i' tag instead we will use it for the icons of our feature box. Also we will give the class of 
  'feature-box__icon' to the 'i' element. Next we will create a h3 heading and also set the 'heading-tertiary' class that we built previously. And then a paragraph and we will give it a class of 
  'feature-box__text' because 'feature-box' is a block and this paragraph is an element in BEM architechture.

  Feature-box is a seperate component. So for styling the feature boxes we will create a '_feature-box.scss' file in the components directory and import it into the main.scss file.

  However first we also need to style the overall feature section as well. Specifically we want to have padding at top and bottom of the section, gradient with background image just like the header and 
  also we want it non-rectangular (skewed). For now we will simply give it padding, apply gradient and background image 'nat-4.jpg' and background-size to cover and we almost always need to do that. We will 
  worry later for making the section non-rectangular.
  
  Now when we are styling the overall sections we do these in the 'pages' directory in the '_home.scss' file.

  Back to the feature box, we want it to be white background and also a bit transparent. So we will set the 'background-color' using the 'rgba()' function.
  font-size of 1.5rem
  padding of 2.5rem
  text-align to center
  border-radius of 3px
  box-shadow of 0 1.5rem 4rem rgba($color-black, .15)

  After doing that we will have a card. However our h3 and paragraph are too close and so we will simply give utility class 'u-margin-small-bottom' to our 'h3'.

  Next we will work on our icon inside the 'feature-box'. So first we will increase its size and because our icon is affectively a font we can simply use 'font-size' property on it. Next we will also give
  it some 'padding-bottom'. Next we also want our icon to have the gradient just like we did for our 'h2' secondary heading in about section. For this similar to 'heading-secondary' we will use 'background
  -image', 'bacground-clip', and 'color' to transparent.

  Next on hover we want our feature-box to get a bit up and also scales a bit. For this as usualy we will use tranform property and use 'translateY' and 'scale' functions.

  Now we didn't need to specify the 'font-size' of the pargraph text because we have given the font-size of 1.5rem to 'feature-box' and then paragraph inside that 'feature-box' will inherit that. We can 
  change it by specificaly declaring it.

  Next we will copy the markup 3 more times and also change the icons as well as headings. Notice that we didn't need to set the float properties as we are already using our grid system classes that we
  defined earlier and our cards will automatically be as grid of 1/4. However we have this margin right of 2rem applied on each of the card which is coming from the grid system except the last child. But
  for these feature section we want to have a larger margin right. Also for 'about' section we want the two columns to have a bit larger margin as well. To achieve this we will simply go to the 'variables' 
  file and set the 'gutter-horizontal' to be 6rem.

  Finally we need to skew the whole feature section but not the feature-boxes inside the feature section. Now we can use the 'clip-path' property like we did previously but this time we will use the 
  'transform' property and 'skew(-6deg)'. However when we will do this our whole feature section with everything inside it will get skewed. To fix this we will apply the skew to the children of our feature 
  section in the opposite direction i-e +6deg. Now if we do that on 'feature-box' then although the boxes will get back straight however each box will be one step high and this is because the row which contains 
  this 'feature-boxes' is still skewed. So instead we can give our row another class lets say 'row-skew' and then select it and set its transform property to skew in opposite direction to what we did on 
  'section-feature'. However instead of doing that we will select the 'section-feature' and from that selecting the direct child selector like following:

                              & > * {
                                transform: skewY(6deg);
                              }

  The reason to do it like this i-e by selecting the direct children of the 'section-feature' is that imagine later we have to add some more features with different classes, then we will have to add this
  transform properties on them as well. But like this we are applying these rules on the direct child of the 'section-feature'. Now if we look at the markup the direct child of 'section-feature' is the
  'row' and so this rule will be applied on everything inside that row.

  Now our background image for this 'section-feature' is still skewed but it doesn't feel weird so lets leave it like that.

  Now finally we need to remove the small white triangle that appeared because of skew. For this we will simple set the 'margin-top' to our 'section-feature' and give it a negative margin.











*/

@import "abstracts/functions";
@import "abstracts/mixins";
@import "abstracts/variables";

@import "base/animations";
@import "base/base";
@import "base/typography";
@import "base/utilities";

@import "components/button";
@import "components/composition";
@import "components/feature-box";

@import "layout/header";
@import "layout/grid";

@import "pages/home";